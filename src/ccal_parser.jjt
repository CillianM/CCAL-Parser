/*
Here are the options for the programme as a whole. All we need is to ignore cases so we place that option here
*/
options {
   IGNORE_CASE = true;
   MULTI=true;
   VISITOR=true;
   NODE_DEFAULT_VOID=true;
   NODE_EXTENDS="BaseNode";
 }

/*
    Here we start the definition of our parser. This defines the entry through which the parsing will begin. 
    We allow for a file to be passed in or for tokens to be fed into the command line
*/
PARSER_BEGIN(CCALParser)

public class CCALParser {

    public static void main(String [] args){

          //Parser initialization
          CCALParser parser;

          if(args.length == 0){
            System.out.println ("CCALParser: Reading input ...");
            parser = new CCALParser(System.in);
          }
          else if(args.length == 1){
            System.out.println ("CCALParser: Reading the file " + args[0] + " ..." );
            try {
              parser = new CCALParser(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e) {
              System.out.println ("CCALParser: The file " + args[0] + " was not found.");
              return;
            }
          }
          else {
            System.out.println ("CCALParser:  You must use one of the following:");
            System.out.println ("         java CCALParser < file");
            System.out.println ("Or");
            System.out.println ("         java CCALParser file");
            return ;
          }
          try {
            Programme();
            System.out.println ("CCALParser: The input was read successfully.");
          }
          catch(ParseException e){
            System.out.println ("CCALParser: There was an error during the parse.");
            System.out.println (e.getMessage());
          }
          catch(TokenMgrError e){
            System.out.println ("CCALParser: There was an error.");
            System.out.println (e.getMessage());
          }
        }
    }

PARSER_END (CCALParser)

/*
    Below defines what we'll ignore during the parsing, this includes new lines and nested comments
*/

TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}

//Newline/space skips
SKIP: { "\n" | "\r" | "\r\n" |"\t"|" "}

//Comment Skips
SKIP :
{
    "/*" { commentNesting++; } : IN_COMMENT
    | <"//" (~["\n"])* "\n">
}

//https://goo.gl/RFkbtP
<IN_COMMENT> SKIP : {
   "/*" { commentNesting++;}
   | "*/" { commentNesting--;
            if(commentNesting == 0)
                SwitchTo(DEFAULT);
            }
   |<~[]>

}

/*
    These are the accepted tokens used within the language defined through http://www.computing.dcu.ie/~davids/courses/CA4003/ccal.pdf
*/

TOKEN :
{
      <ASIGN:("=")>
    | <PLUS:("+")>
    | <MINUS:("-")>
    | <TILDA:("~")>
    | <OR:("||")>
    | <AND:("&&")>
    | <EQ:("==")>
    | <NOTEQ:("!=")>
    | <LT:("<")>
    | <LTEQ:("<=")>
    | <GT:(">")>
    | <GTEQ:(">=")>
    | <COMMA:(",")>
    | <COLON:(":")>
    | <SCOLON:(";")>
    | <OPBRA :("(")>
    | <CLBRA:(")")>
    | <VAR: "var">
    | <CONST: "const">
    | <RET: "return">
    | <INT: "integer">
    | <BOOL: "boolean">
    | <VOID: "void">
    | <MAIN: "main">
    | <IF: "if">
    | <ELSE: "else">
    | <TRUE: "true">
    | <FALSE: "false">
    | <WHILE: "while">
    | <BEGIN: "begin">
    | <END: "end">
    | <IS: "is">
    | <SKI: ("skip")>
    | <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>|<SPECHAR>)*>
    | <DIGIT: "0" | ("-")? ["1" - "9"] (["0" - "9"])*> //Ensure 0s are taken care of in any form
    | <LETTER: (["a"-"z","A"-"Z"])>
    | <SPECHAR : "_"> //special characters used in variable names
}

//Start the parsing here
//Break down the programme into a list of declarations,functions and it's main method
void Programme () #programme: {}
{
    declarationList(){System.out.println("Declaration List");}
    functionList(){System.out.println("Function List");}
    mainMethod(){System.out.println("Main Method");}
}

//Take the structure of a main method and make sub calls to the inner structures
void mainMethod () #main: {}
{
    <MAIN> {System.out.println("Begin");}
    <BEGIN> {System.out.println("Main");}
    declarationList() {System.out.println("Declaration List");}
    statementBlock() {System.out.println("Statement Block");}
    <END> {System.out.println("End");}
}

//Made up of zero or more functions
void functionList () #funtionList: {}
{
    (function())*
}

//Function broken down into tokens
void function () : {}
{
    type() identifier()<OPBRA>paramList()<CLBRA><IS> {System.out.println("Function Header");}
    declarationList() {System.out.println("Declaration List");}
    <BEGIN> {System.out.println("Begin Function");}
    statementBlock() {System.out.println("Function Statement Block");}
    <RET><OPBRA>(expression() | {})<CLBRA><SCOLON> {System.out.println("Function return");}
    <END>{System.out.println("End Function");}
}

//Can be a list of parameters or nothing at all
void paramList () : {}
{
    ((<COMMA>|{})identifier()<COLON>type())+ | {}
}

//A statement block can have zero or more statements
void statementBlock () : {}
{
    (statement())*{System.out.println("Statement");}
}

//Break statement structure down into tokesn
void statement () : {}
{
    //Take multiple options for a statement into account in one line
    identifier()(<ASIGN>expression()| <OPBRA>argList()<CLBRA>)<SCOLON>
    | (<IF> | <WHILE>) conditionInteraction() <BEGIN> statementBlock() <END>
    | (<ELSE> | {}) <BEGIN> statementBlock() <END>
    | <SKI><SCOLON>
}

//Tokenize structure of condition and return back the amount of brackets used
int condition (int bracketCount) : {}
{
    (<OPBRA> {bracketCount++; System.out.println("Open Bracket");} | {})
    expression()comparisionOp()expression()
    (<CLBRA>{bracketCount--; System.out.println("Close Bracket");} | {})
    {return bracketCount;}
}

//Tokenize one or more conditions while keeping trakc of any brackets/nested brackets 
void conditionInteraction () : {
int bracketCount = 0;
}
{

    (<TILDA> | {}){bracketCount = condition(bracketCount); System.out.println("Bracket Count = " + bracketCount);}
    ((<OR> | <AND>){bracketCount = condition(bracketCount); System.out.println("Bracket Count = " + bracketCount);})*{if(bracketCount != 0) throw new ParseException("Brackets not closed correctly");}
}

//Comparison operators
void comparisionOp () : {}
{
    <EQ> {System.out.println("Equals Operator");}
    | <NOTEQ> {System.out.println("Not Equals Operator");}
    | <LT> {System.out.println("Less Than Operator");}
    | <LTEQ> {System.out.println("Less Than Equals Operator");}
    | <GT> {System.out.println("Greater Than Operator");}
    | <GTEQ> {System.out.println("Greater Than Equals Operator");}
}

//Zero or more declarations
void declarationList () : {}
{
    (declaration()<SCOLON>)*
}

//A declaration can be a variable declaration or a constant decalration
void declaration () : {}
{
    varDeclaration()|constDeclaration() {System.out.println("Declaration");}
}

//Tokenize constant decalration
void constDeclaration () : {}
{
    <CONST>identifier()<COLON>type()<ASIGN>expression() {System.out.println("Const decalration");}
}

//Tokenize variable decalration
void varDeclaration () : {}
{
    <VAR><IDENTIFIER><COLON>type() {System.out.println("Var declaration");}
}

//Tokenize structure of expression
void expression () : {}
{
    //Moved some of the structure of a fragment into the expression
    /*
    As an identifier is part of a fragment and expression there is no need to have it in both,
    by removing it from a fragment we remove the need for a lookahead to see which tokens we should be 
    reading in after
    */
    fragment()(binOp()fragment() | {}) //still keeping posibility of negative identifier from fragment
    |identifier()(<OPBRA>argList()<CLBRA>|binOp()(identifier()|fragment())|{}) //positive identifier from fragment integrated here
    |<OPBRA>expression()<CLBRA>

    {System.out.println("Expression");}
}

//Tokenize the remaining structures of a fragment
void fragment () : {}
{
    <MINUS>(identifier()|<DIGIT>){System.out.println("Negative identifier");}
    | <DIGIT>{System.out.println("Number fragment");}
    | boolOp(){System.out.println("Boolean fragment");}

}

//Can be a list of arguments or nothing
void argList () : {}
{
    ((<COMMA>|{})identifier())+ | {}
}

//Tokenize identifier
void identifier () : {}
{
    <IDENTIFIER>{System.out.println("Identifier");}
}

//Tokenize structure of a type
void type () : {}
{
    <INT> {System.out.println("Integer Type");}
    |<BOOL> {System.out.println("Boolean Type");}
    |<VOID> {System.out.println("Void Type");}
}

//Boolean operations
void boolOp() : {}
{
    <TRUE>{System.out.println("True");}
    |<FALSE>{System.out.println("False");}
}

//Binary operations
void binOp() : {}
{
    <PLUS> {System.out.println("Plus operator");}
    |<MINUS> {System.out.println("Minus operator");}
}