/*
Here are the options for the programme as a whole. All we need is to ignore cases so we place that option here
*/
options {
   IGNORE_CASE = true;
   MULTI = true;
   VISITOR = true;
   NODE_DEFAULT_VOID = true;
 }

/*
    Here we start the definition of our parser. This defines the entry through which the parsing will begin. 
    We allow for a file to be passed in or for tokens to be fed into the command line
*/
PARSER_BEGIN(CCALParser)

import java.util.*;

public class CCALParser {

    public static Hashtable SymbolTable = new Hashtable();


    public static void main(String [] args){

          //Parser initialization
          CCALParser parser;

          if(args.length == 0){
            System.out.println ("CCALParser: Reading input ...");
            parser = new CCALParser(System.in);
          }
          else if(args.length == 1){
            System.out.println ("CCALParser: Reading the file " + args[0] + " ..." );
            try {
              parser = new CCALParser(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e) {
              System.out.println ("CCALParser: The file " + args[0] + " was not found.");
              return;
            }
          }
          else {
            System.out.println ("CCALParser:  You must use one of the following:");
            System.out.println ("         java CCALParser < file");
            System.out.println ("Or");
            System.out.println ("         java CCALParser file");
            return ;
          }
          try {
            SimpleNode root = parser.Programme();
            System.out.println("**** Abstract Syntax Tree ****");
            root.dump("");
            System.out.println("******************************");

            System.out.println();

            Visitor v = new Visitor();
            root.jjtAccept(v, null);
            System.out.println ("CCALParser: The input was read successfully.");

          }
          catch(ParseException e){
            System.out.println ("CCALParser: There was an error during the parse.");
            System.out.println (e.getMessage());
          }
          catch(TokenMgrError e){
            System.out.println ("CCALParser: There was an error.");
            System.out.println (e.getMessage());
          }
        }
    }

PARSER_END (CCALParser)

/*
    Below defines what we'll ignore during the parsing, this includes new lines and nested comments
*/

TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}

//Newline/space skips
SKIP: { "\n" | "\r" | "\r\n" |"\t"|" "}

//Comment Skips
SKIP :
{
    "/*" { commentNesting++; } : IN_COMMENT
    | <"//" (~["\n"])* "\n">
}

//https://goo.gl/RFkbtP
<IN_COMMENT> SKIP : {
   "/*" { commentNesting++;}
   | "*/" { commentNesting--;
            if(commentNesting == 0)
                SwitchTo(DEFAULT);
            }
   |<~[]>

}

/*
    These are the accepted tokens used within the language defined through http://www.computing.dcu.ie/~davids/courses/CA4003/ccal.pdf
*/

TOKEN :
{
      <ASIGN:("=")>
    | <PLUS:("+")>
    | <MINUS:("-")>
    | <TILDA:("~")>
    | <OR:("||")>
    | <AND:("&&")>
    | <EQ:("==")>
    | <NOTEQ:("!=")>
    | <LT:("<")>
    | <LTEQ:("<=")>
    | <GT:(">")>
    | <GTEQ:(">=")>
    | <COMMA:(",")>
    | <COLON:(":")>
    | <SCOLON:(";")>
    | <OPBRA :("(")>
    | <CLBRA:(")")>
    | <VAR: "var">
    | <CONST: "const">
    | <RET: "return">
    | <INT: "integer">
    | <BOOL: "boolean">
    | <VOID: "void">
    | <MAIN: "main">
    | <IF: "if">
    | <ELSE: "else">
    | <TRUE: "true">
    | <FALSE: "false">
    | <WHILE: "while">
    | <BEGIN: "begin">
    | <END: "end">
    | <IS: "is">
    | <SKI: ("skip")>
    | <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>|<SPECHAR>)*>
    | <DIGIT: "0" | ("-")? ["1" - "9"] (["0" - "9"])*> //Ensure 0s are taken care of in any form
    | <LETTER: (["a"-"z","A"-"Z"])>
    | <SPECHAR : "_"> //special characters used in variable names
}

//Start the parsing here
//Break down the programme into a list of declarations,functions and it's main method
SimpleNode Programme () #Programme: {}
{
    declarationList(){}
    functionList(){}
    mainMethod(){}
    {return jjtThis;}
}

//Take the structure of a main method and make sub calls to the inner structures
void mainMethod () #Main: {}
{
    <MAIN> {}
    <BEGIN> {}
    declarationList() {}
    statementBlock() {}
    <END> {}
}

//Made up of zero or more functions
void functionList () #FunctionList: {}
{
    (function())*
}

//Function broken down into tokens

void functionBody() #FunctionBody(3): {}
{
    <IS>
    declarationList() {}
    <BEGIN> {}
    statementBlock() {}
    returnStatement()
    <END>
}

void function () #Function: {}
{
    type() identifier()<OPBRA>paramList()<CLBRA>
    functionBody()
}

void returnStatement () #ReturnStatement: {}
{
    <RET> expression() <SCOLON>
}

//Can be a list of parameters or nothing at all
void paramList () #ParamList: {}
{
    ( identifier() <COLON> type() #Param(2) ( <COMMA> identifier() <COLON> type() #Param(2) )* | {} )
}

//A statement block can have zero or more statements
void statementBlock () #StatementBlock: {}
{
    (statement())*{}
}

//Break statement structure down into tokesn
void statement (): {}
{
    //Take multiple options for a statement into account in one line
     ( LOOKAHEAD(2)
           assignment() <SCOLON> |
           functionCall() <SCOLON> |
           <OPBRA> statementBlock() <CLBRA> |
           <IF> condition() #Condition
             statement()
             <ELSE>
             statement() #If(3)|
           <WHILE> condition() #Condition
             <OPBRA> statementBlock() <CLBRA> #While(2) |
           <SKI> <SCOLON> #Skip)
}

//Tokenize structure of condition and return back the amount of brackets used
void condition ( ) : {}
{
    ( LOOKAHEAD(2)
      <OPBRA> condition() <CLBRA> comparisionOp() |
      <TILDA> condition() #Not(1) |
      expression() comparisionOp() )
}

//Zero or more declarations
void declarationList () #DeclarationList: {}
{
    (declaration()<SCOLON>)*
}

//A declaration can be a variable declaration or a constant decalration
void declaration () : {}
{
    varDeclaration()|constDeclaration() {}
}

//Tokenize constant decalration
void constDeclaration () #ConstDeclaration: {}
{
    <CONST>identifier()<COLON>type()<ASIGN>expression() {}
}

//Tokenize variable decalration
void varDeclaration () #VarDeclaration: {}
{
    <VAR>identifier()<COLON>type() {}
}

//Tokenize structure of expression
void expression () : {}
{
    //Moved some of the structure of a fragment into the expression
    /*
    As an identifier is part of a fragment and expression there is no need to have it in both,
    by removing it from a fragment we remove the need for a lookahead to see which tokens we should be 
    reading in after
    */
    ( LOOKAHEAD(2)
          functionCall() |
          fragment() binOp() )

    {}
}

void functionCall() #FunctionCall:{}
{
   identifier() <OPBRA> ( argList() )* <CLBRA>
}

//Tokenize the remaining structures of a fragment
void fragment () #VariableValue: {}
{
    ( identifier() |
      digit() |
      boolOp() |
      <PLUS> fragment() #Pos |
      <MINUS> fragment() #Minus |
      <OPBRA> expression() <CLBRA> |
      {} )

}

//Can be a list of arguments or nothing
void argList () #ArgumentList: {}
{
    identifier() #Arg(1) ( <COMMA> identifier() #Arg(1) )*
}

//Tokenize identifier
void identifier ( ) #Variable: { Token t; }
{
    t = <IDENTIFIER> { jjtThis.value = t; }
}

void digit () #Digit: { Token t; }
{
    t = <DIGIT> { jjtThis.value = t; }
}

void type ( ) #TypeValue: { Token t; }
{
    ( t = <INT> { jjtThis.value = t; } |
      t = <BOOL> { jjtThis.value = t; } |
      t = <VOID> { jjtThis.value = t; } )
}

//Comparison operators
void comparisionOp () : {}
{
    <EQ> #Equal(2)
    | <NOTEQ> #NotEqual(2)
    | <LT> #LessThan(2)
    | <LTEQ> #LessThanEqual(2)
    | <GT> #GreaterThan(2)
    | <GTEQ> #GreaterThanEqual(2)
    |<OR> condition() #Or(2) |
          <AND> condition() #And(2) | {}
}

void boolOp ( ) #Boolean: { Token t; }
{
    t = <TRUE> { jjtThis.value = t; } |
    t = <FALSE> { jjtThis.value = t; }
}

void binOp ( ) : {}
{
    ( <PLUS> expression() #Add(2) |
      <MINUS> expression() #Subtract(2) |
      {} )
}

void assignment () #Assignment: {}
{
    identifier() <ASIGN> expression()
}